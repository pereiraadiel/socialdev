generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  MALE
  FEMALE
}

model User {
  id         String   @id @default(cuid())
  firstName  String
  lastName   String
  biography  String
  sex        Sex
  pictureURL String
  username   String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  fans        Fanbase[]         @relation("fanbase")
  heroes      Fanbase[]         @relation("hero")
  myFriends   Friendship[]      @relation("userfriend")
  friends     Friendship[]      @relation("friend")
  skills      UserSkill[]       @relation("userskill")
  skillVotes  UserSkill[]       @relation("voter")
  communities CommunityMember[]
  depoiments  Depoiment[]
}

model Fanbase {
  userId    String
  fanUserId String

  user User @relation("fanbase", fields: [userId], references: [id], map: "fanbase_userId_fk")
  fan  User @relation("hero", fields: [userId], references: [id], map: "fanbase_fanUserId_fk")

  @@id([userId, fanUserId])
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users UserSkill[] @relation("skill")
}

model UserSkill {
  userId     String
  skillId    String
  voterId    String
  evaluation Int

  user  User  @relation("userskill", fields: [userId], references: [id], map: "userskill_userId_fk")
  skill Skill @relation("skill", fields: [skillId], references: [id], map: "userskill_skillId_fk")
  voter User  @relation("voter", fields: [voterId], references: [id], map: "userskill_voterId_fk")

  @@id([userId, skillId])
}

model Friendship {
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("userfriend", fields: [userId], references: [id], map: "friendship_userId_fk")
  friend User @relation("friend", fields: [friendId], references: [id], map: "friendship_friendId_fk")

  @@id([userId, friendId])
}

enum CommunityVisibility {
  PUBLIC
  PRIVATE
}

model Community {
  id          String              @id @default(cuid())
  name        String
  description String
  pictureURL  String
  slug        String              @unique
  ownerId     String
  visibility  CommunityVisibility
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  members    CommunityMember[]
  depoiments CommunityDepoiment[]
}

model CommunityMember {
  userId      String
  communityId String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], map: "communitymember_userId_fk")
  community Community @relation(fields: [communityId], references: [id], map: "communitymember_communityId_fk")

  @@id([userId, communityId])
}

model Depoiment {
  id        String   @id @default(cuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  communities CommunityDepoiment[]
  user        User                 @relation(fields: [userId], references: [id], map: "depoiment_userId_fk")
}

model CommunityDepoiment {
  communityId String
  depoimentId String

  community Community @relation(fields: [communityId], references: [id], map: "communitydepoiment_communityId_fk")
  depoiment Depoiment @relation(fields: [depoimentId], references: [id], map: "communitydepoiment_depoimentId_fk")

  @@id([communityId, depoimentId])
}
